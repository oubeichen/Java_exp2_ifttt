/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package oubeichen;

import java.awt.event.ActionEvent;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.Iterator;
import java.util.Random;
import javax.swing.DefaultListModel;

/**
 *
 * @author oubeichen
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        this.setLocationRelativeTo(null); //居中显示
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        TaskRightClickPopMenu = new javax.swing.JPopupMenu();
        EditPopMenu = new javax.swing.JMenuItem();
        StartPopMenu = new javax.swing.JMenuItem();
        TabbedPanel = new javax.swing.JTabbedPane();
        RunPanel = new javax.swing.JPanel();
        IFTTTLabel = new javax.swing.JLabel();
        RunningTaskScroll = new javax.swing.JScrollPane();
        RunningTaskList = new javax.swing.JList();
        RunningTaskLabel = new javax.swing.JLabel();
        HelpScroll = new javax.swing.JScrollPane();
        HelpTextArea = new javax.swing.JTextArea();
        LogScroll = new javax.swing.JScrollPane();
        LogTextArea = new javax.swing.JTextArea();
        LogLabel = new javax.swing.JLabel();
        ManagePanel = new javax.swing.JPanel();
        TaskListLabel = new javax.swing.JLabel();
        TaskContentLabel = new javax.swing.JLabel();
        TaskListScroll = new javax.swing.JScrollPane();
        TaskList = new javax.swing.JList();
        TaskContentScroll = new javax.swing.JScrollPane();
        TaskContent = new javax.swing.JTextArea();
        MenuBar = new javax.swing.JMenuBar();
        FileMenu = new javax.swing.JMenu();
        LoadMenu = new javax.swing.JMenuItem();
        SaveMenu = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        TaskMenu = new javax.swing.JMenu();
        NewTaskMenu = new javax.swing.JMenuItem();
        EditTaskMenu = new javax.swing.JMenuItem();
        DelTaskMenu = new javax.swing.JMenuItem();
        ControlMenu = new javax.swing.JMenu();
        StartMenu = new javax.swing.JMenuItem();
        PauseMenu = new javax.swing.JMenuItem();
        StopMenu = new javax.swing.JMenuItem();
        HelpMenu = new javax.swing.JMenu();
        HelpMenuItem = new javax.swing.JMenuItem();
        AboutMenuItem = new javax.swing.JMenuItem();

        EditPopMenu.setText("编辑任务");
        EditPopMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditPopMenuActionPerformed(evt);
            }
        });
        TaskRightClickPopMenu.add(EditPopMenu);

        StartPopMenu.setText("jMenuItem1");
        StartPopMenu.setActionCommand("开始任务");
        StartPopMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StartPopMenuActionPerformed(evt);
            }
        });
        TaskRightClickPopMenu.add(StartPopMenu);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        IFTTTLabel.setFont(new java.awt.Font("幼圆", 0, 36)); // NOI18N
        IFTTTLabel.setText("单机版IFTTT");

        RunningTaskList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                RunningTaskListValueChanged(evt);
            }
        });
        RunningTaskScroll.setViewportView(RunningTaskList);

        RunningTaskLabel.setFont(new java.awt.Font("宋体", 1, 18)); // NOI18N
        RunningTaskLabel.setText("正在运行的任务：");

        HelpTextArea.setEditable(false);
        HelpTextArea.setColumns(20);
        HelpTextArea.setRows(5);
        HelpTextArea.setText("使用说明：\n1.在管理任务选项卡或者菜单中中新建任务\n2.选择对应任务执行开始任务\n3.在下列文本区域查看当前任务的完整信息\n4.修改任务后，如果该任务正在运行，则必\n  须结束任务重新开始才能生效");
        HelpScroll.setViewportView(HelpTextArea);

        LogTextArea.setEditable(false);
        LogTextArea.setColumns(20);
        LogTextArea.setRows(5);
        LogScroll.setViewportView(LogTextArea);

        LogLabel.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        LogLabel.setText("任务运行信息：");

        javax.swing.GroupLayout RunPanelLayout = new javax.swing.GroupLayout(RunPanel);
        RunPanel.setLayout(RunPanelLayout);
        RunPanelLayout.setHorizontalGroup(
            RunPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(RunPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(RunPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(RunPanelLayout.createSequentialGroup()
                        .addGroup(RunPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(RunPanelLayout.createSequentialGroup()
                                .addComponent(RunningTaskScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                .addGap(18, 18, 18))
                            .addGroup(RunPanelLayout.createSequentialGroup()
                                .addComponent(RunningTaskLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(74, 74, 74))
                            .addGroup(RunPanelLayout.createSequentialGroup()
                                .addComponent(IFTTTLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(9, 9, 9)))
                        .addComponent(HelpScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 367, Short.MAX_VALUE))
                    .addComponent(LogScroll, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(RunPanelLayout.createSequentialGroup()
                        .addComponent(LogLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        RunPanelLayout.setVerticalGroup(
            RunPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(RunPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(RunPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(HelpScroll)
                    .addGroup(RunPanelLayout.createSequentialGroup()
                        .addComponent(IFTTTLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 37, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(RunningTaskLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(RunningTaskScroll)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(LogLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(LogScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 87, Short.MAX_VALUE)
                .addContainerGap())
        );

        TabbedPanel.addTab("运行信息", RunPanel);

        TaskListLabel.setFont(new java.awt.Font("宋体", 1, 18)); // NOI18N
        TaskListLabel.setText("任务列表：");

        TaskContentLabel.setFont(new java.awt.Font("宋体", 1, 18)); // NOI18N
        TaskContentLabel.setText("详细信息：");

        TaskList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TaskListMouseClicked(evt);
            }
        });
        TaskList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                TaskListValueChanged(evt);
            }
        });
        TaskListScroll.setViewportView(TaskList);

        TaskContent.setEditable(false);
        TaskContent.setColumns(20);
        TaskContent.setRows(5);
        TaskContentScroll.setViewportView(TaskContent);

        javax.swing.GroupLayout ManagePanelLayout = new javax.swing.GroupLayout(ManagePanel);
        ManagePanel.setLayout(ManagePanelLayout);
        ManagePanelLayout.setHorizontalGroup(
            ManagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ManagePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ManagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(TaskListLabel)
                    .addComponent(TaskListScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(ManagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(TaskContentScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 386, Short.MAX_VALUE)
                    .addGroup(ManagePanelLayout.createSequentialGroup()
                        .addComponent(TaskContentLabel)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        ManagePanelLayout.setVerticalGroup(
            ManagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ManagePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ManagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TaskListLabel)
                    .addComponent(TaskContentLabel))
                .addGap(18, 18, 18)
                .addGroup(ManagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(TaskListScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 288, Short.MAX_VALUE)
                    .addComponent(TaskContentScroll))
                .addContainerGap())
        );

        TabbedPanel.addTab("管理任务", ManagePanel);

        FileMenu.setText("文件");

        LoadMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        LoadMenu.setText("读取");
        FileMenu.add(LoadMenu);

        SaveMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        SaveMenu.setText("保存");
        FileMenu.add(SaveMenu);

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ESCAPE, 0));
        jMenuItem3.setText("退出");
        FileMenu.add(jMenuItem3);

        MenuBar.add(FileMenu);

        TaskMenu.setText("任务");

        NewTaskMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        NewTaskMenu.setText("新建任务");
        NewTaskMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NewTaskMenuActionPerformed(evt);
            }
        });
        TaskMenu.add(NewTaskMenu);

        EditTaskMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        EditTaskMenu.setText("修改任务");
        EditTaskMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditTaskMenuActionPerformed(evt);
            }
        });
        TaskMenu.add(EditTaskMenu);

        DelTaskMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_MASK));
        DelTaskMenu.setText("删除任务");
        DelTaskMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DelTaskMenuActionPerformed(evt);
            }
        });
        TaskMenu.add(DelTaskMenu);

        MenuBar.add(TaskMenu);

        ControlMenu.setText("控制");

        StartMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.ALT_MASK));
        StartMenu.setText("开始任务");
        StartMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StartMenuActionPerformed(evt);
            }
        });
        ControlMenu.add(StartMenu);

        PauseMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.ALT_MASK));
        PauseMenu.setText("暂停/恢复任务");
        PauseMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PauseMenuActionPerformed(evt);
            }
        });
        ControlMenu.add(PauseMenu);

        StopMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.ALT_MASK));
        StopMenu.setText("结束任务");
        StopMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StopMenuActionPerformed(evt);
            }
        });
        ControlMenu.add(StopMenu);

        MenuBar.add(ControlMenu);

        HelpMenu.setText("帮助");

        HelpMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        HelpMenuItem.setText("帮助");
        HelpMenu.add(HelpMenuItem);

        AboutMenuItem.setText("关于");
        AboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AboutMenuItemActionPerformed(evt);
            }
        });
        HelpMenu.add(AboutMenuItem);

        MenuBar.add(HelpMenu);

        setJMenuBar(MenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(TabbedPanel)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(TabbedPanel)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void NewTaskMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NewTaskMenuActionPerformed
        // TODO add your handling code here:
        if (newTaskDialog == null) {
            newTaskDialog = new NewTaskDialog(this, true, "新建任务");//新建对话框，并且使得主窗口无法使用。
        }
        newTaskDialog.setVisible(true);

        if (newTaskDialog.OK == true)//写入任务
        {
            Task tsk;
            tsk = newTaskDialog.gettask();
            Calendar initdate = Calendar.getInstance();
            Random rdm = new Random();
            initdate.setTime(new Date());//初始化为今天
            tsk.UID = initdate.get(Calendar.YEAR) + "" + initdate.get(Calendar.MONTH) + "" + initdate.get(Calendar.DAY_OF_MONTH)
                    + "" + initdate.get(Calendar.HOUR_OF_DAY) + "" + initdate.get(Calendar.MINUTE) + "" + initdate.get(Calendar.SECOND) + ""
                    + rdm.nextInt(999);//生成一个伪UID
            Tasks.add(tsk);
        }

        newTaskDialog = null;
        UpdateTaskList();
    }//GEN-LAST:event_NewTaskMenuActionPerformed

    private void AboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AboutMenuItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_AboutMenuItemActionPerformed

    private void EditTaskMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditTaskMenuActionPerformed
        // TODO add your handling code here:
        onEditTask();
    }//GEN-LAST:event_EditTaskMenuActionPerformed

    private void TaskListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_TaskListValueChanged
        // TODO add your handling code here:
        //System.out.println(evt.toString());
        //javax.swing.JOptionPane.showMessageDialog(this, "请选择一项任务！", "错误", javax.swing.JOptionPane.ERROR_MESSAGE);
        int SelectedTask = TaskList.getSelectedIndex();
        if (SelectedTask >= Tasks.size() || SelectedTask < 0) {
            TaskContent.setText("");
            return;
        }
        StringBuilder TaskContentStr = new StringBuilder();
        Task tsk = Tasks.get(SelectedTask);
        TaskContentStr.append("UID：").append(tsk.UID).append("\n");
        TaskContentStr.append("任务名称：").append(tsk.taskname).append("\n\n");
        if (tsk.thisindex == 0) {
            TaskContentStr.append("THIS类型：到达时间\n日期：").append(tsk.thisstring1).append("\n时间：").append(tsk.thisstring2).append("\n\n");
        } else {
            TaskContentStr.append("THIS类型：到达邮件\n邮箱名：").append(tsk.thisstring1).append("\n\n");
        }
        if (tsk.thatindex == 0) {
            TaskContentStr.append("THAT类型：发送邮件\n目标邮箱：").append(tsk.thisstring1).append("\n内容：").append(tsk.thatstring2).append("\n");
        } else {
            TaskContentStr.append("THAT类型：发送微博\n微博用户名：").append(tsk.thisstring1).append("\n内容：").append(tsk.thatstring2).append("\n");
        }
        TaskContent.setText(TaskContentStr.toString());
    }//GEN-LAST:event_TaskListValueChanged

    private void DelTaskMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DelTaskMenuActionPerformed
        // TODO add your handling code here:
        int SelectedTask = TaskList.getSelectedIndex();
        if (SelectedTask >= Tasks.size() || SelectedTask < 0) {
            javax.swing.JOptionPane.showMessageDialog(this, "请选择一项任务！", "错误", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
        Tasks.remove(SelectedTask);
        UpdateTaskList();
    }//GEN-LAST:event_DelTaskMenuActionPerformed

    private void TaskListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TaskListMouseClicked
        // TODO add your handling code here:
        int SelectedTask = TaskList.getSelectedIndex();
        if (SelectedTask < Tasks.size() && SelectedTask >= 0) {
            if (evt.getClickCount() == 2) {
                onEditTask();
            }
            if (evt.getButton() == 3) {
                TaskRightClickPopMenu.show(TaskList, evt.getX(), evt.getY());
            }
        }
        TaskList.setSelectedIndex(TaskList.locationToIndex(evt.getPoint()));
    }//GEN-LAST:event_TaskListMouseClicked

    private void StartMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StartMenuActionPerformed
        // TODO add your handling code here:
        int SelectedTask = TaskList.getSelectedIndex();
        if (SelectedTask >= Tasks.size() || SelectedTask < 0) {
            javax.swing.JOptionPane.showMessageDialog(this, "请选择一项任务！", "错误", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }
       String SelectedTaskUID = Tasks.get(SelectedTask).UID;
       Iterator it = RunningTasks.iterator();//在正在运行任务列表中找
       while(it.hasNext()){
             Task tsk = (Task) it.next();
             if(tsk.UID.equals(SelectedTaskUID)){//已经运行了同一个任务
                 return;
             }
       }
       RunningTask tsk = new RunningTask(Tasks.get(SelectedTask));//保持正在运行任务的数据独立性，不受到修改任务删除任务的影响。
       //TODO add Thread code here:
       
       tsk.isRunning = true;
       RunningTasks.add(tsk);
       UpdateRunningTaskList();
       tsk.UID = "aaaaa";
    }//GEN-LAST:event_StartMenuActionPerformed

    private void PauseMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PauseMenuActionPerformed
        // TODO add your handling code here:
        int SelectedTask = RunningTaskList.getSelectedIndex();
        if (SelectedTask >= RunningTasks.size() || SelectedTask < 0) {
            javax.swing.JOptionPane.showMessageDialog(this, "请选择一项任务！", "错误", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }
        if(RunningTasks.get(SelectedTask).isRunning == true)
        {
            //TODO add Thread code here:
            
            RunningTasks.get(SelectedTask).isRunning = false;
        }else{
            //TODO add Thread code here:
            
            RunningTasks.get(SelectedTask).isRunning = true;
        }
        UpdateRunningTaskList();
    }//GEN-LAST:event_PauseMenuActionPerformed

    private void StopMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StopMenuActionPerformed
        // TODO add your handling code here:
        int SelectedTask = RunningTaskList.getSelectedIndex();
        if (SelectedTask >= RunningTasks.size() || SelectedTask < 0) {
            javax.swing.JOptionPane.showMessageDialog(this, "请选择一项任务！", "错误", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }
        //TODO add Thread code here:
        
        RunningTasks.remove(SelectedTask);
        UpdateRunningTaskList();
    }//GEN-LAST:event_StopMenuActionPerformed

    private void RunningTaskListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_RunningTaskListValueChanged
        // TODO add your handling code here:
        int SelectedTask = RunningTaskList.getSelectedIndex();
        if (SelectedTask >= RunningTasks.size() || SelectedTask < 0) {
            HelpTextArea.setText("");
            return;
        }
        StringBuilder TaskContentStr = new StringBuilder();
        RunningTask tsk = RunningTasks.get(SelectedTask);
        TaskContentStr.append("UID：").append(tsk.UID).append("\n");
        TaskContentStr.append("任务名称：").append(tsk.taskname).append("\n\n");
        if (tsk.thisindex == 0) {
            TaskContentStr.append("THIS类型：到达时间\n日期：").append(tsk.thisstring1).append("\n时间：").append(tsk.thisstring2).append("\n\n");
        } else {
            TaskContentStr.append("THIS类型：到达邮件\n邮箱名：").append(tsk.thisstring1).append("\n\n");
        }
        if (tsk.thatindex == 0) {
            TaskContentStr.append("THAT类型：发送邮件\n目标邮箱：").append(tsk.thisstring1).append("\n内容：").append(tsk.thatstring2).append("\n");
        } else {
            TaskContentStr.append("THAT类型：发送微博\n微博用户名：").append(tsk.thisstring1).append("\n内容：").append(tsk.thatstring2).append("\n");
        }
        HelpTextArea.setText(TaskContentStr.toString());
    }//GEN-LAST:event_RunningTaskListValueChanged

    private void EditPopMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditPopMenuActionPerformed
        // TODO add your handling code here:
         EditTaskMenuActionPerformed(evt);
    }//GEN-LAST:event_EditPopMenuActionPerformed

    private void StartPopMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StartPopMenuActionPerformed
        // TODO add your handling code here:
                 StartMenuActionPerformed(evt);
    }//GEN-LAST:event_StartPopMenuActionPerformed
    private void UpdateTaskList() {
        int prevSelIndex = TaskList.getSelectedIndex();
        TaskList.setModel(new DefaultListModel());
        DefaultListModel dlm = (DefaultListModel) TaskList.getModel();
        dlm.setSize(0);
        Iterator it = Tasks.iterator();
        while (it.hasNext()) {
            Task tsk = (Task) it.next();
            dlm.addElement(tsk.taskname);
        }
        if (prevSelIndex < dlm.size() && prevSelIndex >= 0) {
            TaskList.setSelectedIndex(prevSelIndex);
        } else {
            TaskList.setSelectedIndex(dlm.size());
        }
    }
    private void UpdateRunningTaskList(){
        int prevSelIndex = RunningTaskList.getSelectedIndex();
        RunningTaskList.setModel(new DefaultListModel());
        DefaultListModel dlm = (DefaultListModel) RunningTaskList.getModel();
        dlm.setSize(0);
        Iterator it = RunningTasks.iterator();
        while (it.hasNext()) {
            RunningTask tsk = (RunningTask) it.next();
            if(!tsk.isRunning){
                dlm.addElement(tsk.taskname + "（暂停中）");
            }
        }
        if (prevSelIndex < dlm.size() && prevSelIndex >= 0) {
            RunningTaskList.setSelectedIndex(prevSelIndex);
        } else {
            RunningTaskList.setSelectedIndex(dlm.size());
        }
    }
    private void onEditTask() {
        int SelectedTask = TaskList.getSelectedIndex();
        if (SelectedTask >= Tasks.size() || SelectedTask < 0) {
            javax.swing.JOptionPane.showMessageDialog(this, "请选择一项任务！", "错误", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
        if (Tasks.isEmpty()) {
            return;
        }
        if (editTaskDialog == null) {
            editTaskDialog = new NewTaskDialog(this, true, "修改任务");//新建对话框，并且使得主窗口无法使用。
        }
        Task tsk = Tasks.get(SelectedTask);
        //初始化窗口开始
        editTaskDialog.settask(tsk);
        //初始化窗口结束
        editTaskDialog.setVisible(true);

        if (editTaskDialog.OK == true)//写入任务
        {
            tsk = editTaskDialog.gettask();
            Tasks.set(SelectedTask, tsk);
        }
        UpdateTaskList();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }
    private ArrayList<Task> Tasks = new ArrayList<Task>();
    private ArrayList<RunningTask> RunningTasks = new ArrayList<RunningTask>();
    
    class RunningTask extends Task{
        public RunningTask(){
            super();
            isRunning = false;
        }
        public RunningTask(Task tsk){
            super(tsk);
            isRunning = false;
        }
        boolean isRunning;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem AboutMenuItem;
    private javax.swing.JMenu ControlMenu;
    private javax.swing.JMenuItem DelTaskMenu;
    private javax.swing.JMenuItem EditPopMenu;
    private javax.swing.JMenuItem EditTaskMenu;
    private javax.swing.JMenu FileMenu;
    private javax.swing.JMenu HelpMenu;
    private javax.swing.JMenuItem HelpMenuItem;
    private javax.swing.JScrollPane HelpScroll;
    private javax.swing.JTextArea HelpTextArea;
    private javax.swing.JLabel IFTTTLabel;
    private javax.swing.JMenuItem LoadMenu;
    private javax.swing.JLabel LogLabel;
    private javax.swing.JScrollPane LogScroll;
    private javax.swing.JTextArea LogTextArea;
    private javax.swing.JPanel ManagePanel;
    private javax.swing.JMenuBar MenuBar;
    private javax.swing.JMenuItem NewTaskMenu;
    private javax.swing.JMenuItem PauseMenu;
    private javax.swing.JPanel RunPanel;
    private javax.swing.JLabel RunningTaskLabel;
    private javax.swing.JList RunningTaskList;
    private javax.swing.JScrollPane RunningTaskScroll;
    private javax.swing.JMenuItem SaveMenu;
    private javax.swing.JMenuItem StartMenu;
    private javax.swing.JMenuItem StartPopMenu;
    private javax.swing.JMenuItem StopMenu;
    private javax.swing.JTabbedPane TabbedPanel;
    private javax.swing.JTextArea TaskContent;
    private javax.swing.JLabel TaskContentLabel;
    private javax.swing.JScrollPane TaskContentScroll;
    private javax.swing.JList TaskList;
    private javax.swing.JLabel TaskListLabel;
    private javax.swing.JScrollPane TaskListScroll;
    private javax.swing.JMenu TaskMenu;
    private javax.swing.JPopupMenu TaskRightClickPopMenu;
    private javax.swing.JMenuItem jMenuItem3;
    // End of variables declaration//GEN-END:variables
    private NewTaskDialog newTaskDialog = null;
    private NewTaskDialog editTaskDialog = null;
}
